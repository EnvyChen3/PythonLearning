class LogicGate:

    def __init__(self, n):
        self.label = n
        self.output = None

    def getLabel(self):
        return self.label

    def getOutput(self):
        self.output = self.performGateLogic()
        return self.output


class BinaryGate(LogicGate):

    def __init__(self, n):
        super().__init__(n)

        self.pinA = None
        self.pinB = None

    def getpinA(self):
        if self.pinA == None:
            return int(input(f"Enter pinA for gate {self.getLabel()} -->"))
        else:
            return self.pinA.getFrom().getOutput()

    def getpinB(self):
        if self.pinB == None:
            return int(input(f"Enter pinB for gate {self.getLabel()} -->"))
        else:
            return self.pinB.getFrom().getOutput()

    def setNextPin(self, source):
        if self.pinA == None:
            self.pinA = source
        elif self.pinB == None:
            self.pinB = source
        else:
            raise RuntimeError('Error: NO EMPTY PINS')


class UnaryGate(LogicGate):

    def __init__(self, n):
        super().__init__(n)

        self.pin = None

    def getpin(self):
        if self.pin == None:
            return int(input(f"Enter pin for gate {self.getLabel()} -->"))
        else:
            return self.pin.getFrom().getOutput()

    def setNextPin(self, source):
        if self.pin == None:
            self.pin = source

class AndGate(BinaryGate):

    def __init__(self, n):
        super().__init__(n)

    def performGateLogic(self):
        if self.getpinA() == 1 and self.getpinB() == 1:
            return 1
        else:
            return 0


class OrGate(BinaryGate):

    def __init__(self, n):
        super().__init__(n)

    def performGateLogic(self):
        if self.getpinA() == 0 and self.getpinB() == 0:
            return 0
        else:
            return 1


class NotGate(UnaryGate):

    def __init__(self, n):
        super().__init__(n)

    def performGateLogic(self):
        if self.getpin() == 1:
            return 0
        else:
            return 1


class Connector:

    def __init__(self, fgate, tgate):
        self.fromgate = fgate
        self.togate = tgate

        tgate.setNextPin(self)

    def getFrom(self):
        return self.fromgate

    def getTo(self):
        return self.togate


g1 = AndGate('G1')
g2 = AndGate('G2')
g3 = OrGate('G3')
g4 = NotGate('G4')
c1 = Connector(g1, g3)
c2 = Connector(g2, g3)
c3 = Connector(g3, g4)
print(g4.getOutput())


新发现！！！当我g1的pinA输入0时不需要输入pinB，可以直接得到g1的结果为0.难道是python版本的问题吗！
